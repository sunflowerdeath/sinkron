
    createCollection({
        id: string,
        permissions: {
            read: ['readonly', 'editors'],
            create: ['editors'],
            update: ['editors'], // <- this is set to created documents
            delete: ['editors'],
        },
    })

    checkCollectionPermission(col, action, user) // read, create, delete
    checkDocumentPermission(doc, action, user) // update

    // grant write permission
    const meta = {
        editPermissions: {
            'id': [user]
        }
    }
    updateDocumentPermission(doc, (p) => {
        p.grant(user, "write")
    })
    updateDocument(meta, (doc) => {
        doc.permissions[doc].push(user)
    })


    // check permissions
    const user = { id: 1, groups: [1,2,3] }

    => kind: "sync", col
        sinkron.checkCollectionPermission({ col, action: "read", user })

    => kind: "+", col
        sinkron.checkCollectionPermission({ col, action: "create", user })

    => kind: "-", col, doc
        sinkron.checkCollectionPermission({ col, action: "delete", user })

    => kind: "M"
        sinkron.checkDocumentPermission({ doc, action: "update", user })



    // share to user
    createRefCollection({
        id: string,
        permissions: { read: [user.id]  }
    })
    updatePermissions(doc, p => {
        p.grant("read", user)
        p.grant("update", user)
    })
    addDocToRefCollection(doc, col)

    // unshare
    updatePermissions(sharedDoc, p => {
        p.revoke("read", user)
        p.revoke("update", user)
    })
    deleteRefCollection(col)

    // change share settings
    removeDocFromRefCollection(doc, col)

